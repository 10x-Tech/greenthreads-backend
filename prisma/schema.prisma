// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define OrderItem table
model OrderItem {
  id                 String  @id @default(uuid())
  productId          String
  product            Product @relation(fields: [productId], references: [id])
  productName        String
  productPrice       Float
  discountPercentage Float?  @default(0)
  discountedPrice    Float?
  quantity           Int
  orderId            String
  order              Order   @relation(fields: [orderId], references: [id])
}

// Define Order table
model Order {
  id          String      @id @default(uuid())
  userId      Int
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  subtotal    Float
  totalAmount Float
  status      OrderStatus
}

enum OrderStatus {
  ACTIVE
  PENDING
  DELIVERED
}

model Product {
  id                 String               @id @default(uuid())
  productName        String
  productSlug        String
  productCode        String?              @unique()
  description        String?
  originalPrice      Float
  discountPercentage Float?               @default(0)
  discountedPrice    Float?
  Vendor             Vendor?              @relation(fields: [sellerId], references: [id])
  sellerId           String?              @map("seller_id")
  categories         Category[]           @relation("ProductToCategory")
  combinations       ProductCombination[]
  deliveryRange      DeliveryRange        @default(ONE_TO_THREE_DAYS)
  isActive           Boolean              @default(true)
  isNextDayDelivery  Boolean              @default(false)
  variations         ProductVariation[]
  productImages      ProductImage[]
  previewImage       String?
  weight             Int?                 @default(0)
  height             Int?                 @default(0)
  length             Int?                 @default(0)
  width              Int?                 @default(0)
  isDeleted          Boolean              @default(false) @map("is_deleted")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  OrderItem          OrderItem[]
}

enum DeliveryRange {
  ONE_TO_THREE_DAYS
  THREE_TO_FIVE_DAYS
  FIVE_TO_SEVEN_DAYS
  SEVEN_TO_TEN_DAYS
  TEN_TO_FOURTEEN_DAYS
}

model Variation {
  id               String             @id @default(uuid())
  name             String             @unique
  variationOptions VariationOption[]
  ProductVariation ProductVariation[]

  @@map("variations")
}

model VariationOption {
  id                     String                   @id @default(uuid())
  name                   String
  variationId            String                   @map("variation_id")
  variation              Variation                @relation(fields: [variationId], references: [id])
  ProductVariationOption ProductVariationOption[]

  @@map("variation_options")
}

// // Product Variation (e.g., Size, Color)
model ProductVariation {
  id        String                   @id @default(uuid())
  variantId String
  variation Variation                @relation(fields: [variantId], references: [id])
  options   ProductVariationOption[]
  productId String
  products  Product                  @relation(fields: [productId], references: [id])

  @@map("product_variations")
}

// // Product Variation Option (e.g., Small, Red)
model ProductVariationOption {
  id                 String           @id @default(uuid())
  productVariationId String
  ProductVariation   ProductVariation @relation(fields: [productVariationId], references: [id])
  optionId           String
  variationOptions   VariationOption  @relation(fields: [optionId], references: [id])

  @@map("product_variation_options")
}

//Product Combination (e.g.Tshirt-Red-Small,Tshirt-Red-Large)
model ProductCombination {
  id               String         @id @default(uuid())
  skuId            String         @unique
  product          Product        @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId        String
  availableStock   Int            @default(0)
  productStock     ProductStock[]
  productImages    ProductImage[]
  variationDetails Json?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("product_combinations")
}

model ProductStock {
  id                   String             @id @default(uuid())
  totalStock           Int                @default(0)
  unitPrice            Float
  totalPrice           Float
  productCombinationId String
  productCombinations  ProductCombination @relation(fields: [productCombinationId], references: [id])

  @@map("product_stock")
}

//Images
model ProductImage {
  id            String              @id @default(uuid())
  product       Product?            @relation(fields: [productId], references: [id])
  productId     String?
  combination   ProductCombination? @relation(fields: [combinationId], references: [id])
  combinationId String?
  imageUrl      String

  @@map("product_images")
}

model Category {
  id            String     @id @default(uuid())
  name          String
  description   String?
  categoryImg   String?
  categorySlug  String?
  parentId      String?
  productsCount Int        @default(0)
  parent        Category?  @relation("ChildToParent", fields: [parentId], references: [id])
  children      Category[] @relation("ChildToParent")
  products      Product[]  @relation("ProductToCategory")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

// User model
model User {
  userId      String    @id @default(uuid()) @map("user_id")
  username    String?
  email       String    @unique
  externalId  String    @unique
  profileImg  String?
  phoneNumber String?   @unique
  isActive    Boolean   @default(true)
  Customer    Customer?
  Vendor      Vendor?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Customer model
model Customer {
  customerId String  @id @default(uuid()) @map("customer_id")
  fullName   String
  address    String?
  userId     String  @unique
  User       User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

// Vendor model
model Vendor {
  id       String     @id @default(uuid()) @map("seller_id")
  fullName String
  address  String?
  role     VendorRole @default(SELLER)
  userId   String     @unique
  User     User       @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  products Product[]
}

enum VendorRole {
  ADMIN
  SELLER
}
