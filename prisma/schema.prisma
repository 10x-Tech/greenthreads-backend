generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL")
}

model OrderItem {
  id               String          @id @default(uuid())
  productId        String
  productName      String
  productImage     String?
  quantity         Int
  orderId          String
  productDesc      String
  variationDetails Json
  sellerId         String?
  unitAmount       Float?          @map("unit_amount")
  amountDiscount   Float           @map("amount_discount")
  amountSubTotal   Float           @map("amount_subTotal")
  amountTax        Float           @map("amount_tax")
  amountTotal      Float           @map("amount_total")
  deliveryStatus   OrderItemStatus @default(PENDING)
  order            Order           @relation(fields: [orderId], references: [id])
  product          Product         @relation(fields: [productId], references: [id])
  seller           Vendor?         @relation(fields: [sellerId], references: [externalId])
}

model Order {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  orderDisplayId  String        @unique @map("order_display_id")
  currency        String
  metaData        Json?
  paymentIntentId String
  paymentMethod   String
  paymentStatus   PaymentStatus @default(unpaid)
  billingDetails  Json?         @map("billing_details")
  customerDetails Json
  customerId      String
  shippingDetails Json          @map("shipping_details")
  amountSubTotal  Float         @map("shipping_subtotal")
  amountTotal     Float         @map("shipping_total")
  totalDetails    Json
  status          OrderStatus   @default(IN_PROGRESS)
  invoice         Invoice[]
  customer        Customer      @relation(fields: [customerId], references: [externalId])
  orderItems      OrderItem[]
}

model Invoice {
  id            String   @id @default(uuid()) @map("invoice_id")
  orderId       String   @map("order_id")
  invoiceNumber String   @unique
  issueDate     DateTime @default(now()) @map("issue_date")
  dueDate       DateTime @map("due_date")
  totalAmount   Float
  status        String
  order         Order    @relation(fields: [orderId], references: [id])

  @@index([orderId], map: "idx_order_id")
}

model Product {
  createdAt          DateTime          @default(now())
  description        String?
  previewImage       String?
  productName        String
  productSlug        String
  updatedAt          DateTime          @updatedAt
  deliveryRange      DeliveryRange     @default(ONE_TO_THREE_DAYS)
  isActive           Boolean           @default(true)
  isNextDayDelivery  Boolean           @default(false)
  id                 String            @id @default(uuid())
  discountPercentage Float?            @default(0)
  discountedPrice    Float?
  height             Int?              @default(0)
  length             Int?              @default(0)
  originalPrice      Float
  weight             Int?              @default(0)
  width              Int?              @default(0)
  isDeleted          Boolean           @default(false) @map("is_deleted")
  sellerId           String?           @map("seller_id")
  productCode        String?           @unique
  brandId            String?
  OrderItem          OrderItem[]
  Brand              Brand?            @relation(fields: [brandId], references: [id])
  seller             Vendor?           @relation(fields: [sellerId], references: [externalId])
  productImages      ProductImage[]
  productInventory   ProductInventory?
  skus               SKU[]
  categories         Category[]        @relation("ProductToCategory")
}

model Size {
  id   String @id @default(uuid())
  name String @unique
  skus SKU[]

  @@map("sizes")
}

model Color {
  id   String @id @default(uuid())
  name String @unique
  skus SKU[]

  @@map("colors")
}

model SKU {
  id             String        @id @default(uuid())
  skuId          String
  title          String
  sizeId         String?       @map("size_id")
  colorId        String?       @map("color_id")
  productId      String
  availableStock Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  CartItem       CartItem[]
  skuInventory   SKUInventory?
  color          Color?        @relation(fields: [colorId], references: [id])
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  size           Size?         @relation(fields: [sizeId], references: [id])

  @@map("skus")
}

model ProductInventory {
  id           String         @id @default(uuid())
  productId    String         @unique
  totalStock   Int            @default(0)
  unitPrice    Float
  totalPrice   Float
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  product      Product        @relation(fields: [productId], references: [id])
  skuInventory SKUInventory[]

  @@map("product_inventory")
}

model SKUInventory {
  id                 String           @id @default(uuid())
  productInventoryId String
  skuId              String           @unique
  availableStock     Int              @default(0)
  productInventory   ProductInventory @relation(fields: [productInventoryId], references: [id])
  sku                SKU              @relation(fields: [skuId], references: [id])

  @@map("sku_inventory")
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String?
  name      String?
  size      Int?
  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model Category {
  id            String     @id @default(uuid())
  name          String
  parentId      String?
  categoryImg   String?
  categorySlug  String?
  description   String?
  productsCount Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
  parent        Category?  @relation("ChildToParent", fields: [parentId], references: [id])
  children      Category[] @relation("ChildToParent")
  products      Product[]  @relation("ProductToCategory")
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String?
  media       String?
  products    Product[]
}

model User {
  userId      String    @id @default(uuid()) @map("user_id")
  username    String?
  email       String    @unique
  profileImg  String?
  phoneNumber String?   @unique
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer?
  vendor      Vendor?

  @@map("users")
}

model Address {
  id         String   @id @default(uuid())
  customerId String
  city       String
  state      String
  country    String
  line1      String?
  line2      String?
  postalCode String   @map("postal_code")
  customer   Customer @relation(fields: [customerId], references: [externalId])

  @@map("address")
}

model Customer {
  fullName   String
  userId     String    @unique
  externalId String    @unique
  id         String    @id @default(uuid())
  orders     Order[]
  address    Address[]
  cart       Cart?
  user       User      @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("customer")
}

model Vendor {
  fullName   String
  address    String?
  role       VendorRole  @default(SELLER)
  userId     String      @unique
  externalId String      @unique
  id         String      @id @default(uuid())
  OrderItem  OrderItem[]
  products   Product[]
  user       User        @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("seller")
}

model Cart {
  id          String     @id @default(uuid())
  customerId  String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  totalAmount Float?     @default(0)
  discount    Float?     @default(0)
  tax         Float      @default(0)
  customer    Customer   @relation(fields: [customerId], references: [externalId])
  cartItems   CartItem[]

  @@map("cart")
}

model CartItem {
  id         String @id @default(uuid())
  cartId     String
  skuId      String
  quantity   Int
  unitPrice  Float
  totalPrice Float  @default(0)
  cart       Cart   @relation(fields: [cartId], references: [id])
  sku        SKU    @relation(fields: [skuId], references: [id])

  @@map("cart_items")
}

enum OrderItemStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum OrderStatus {
  IN_PROGRESS
  FULFILLED
}

enum PaymentStatus {
  paid
  unpaid
}

enum DeliveryRange {
  ONE_TO_THREE_DAYS
  THREE_TO_FIVE_DAYS
  FIVE_TO_SEVEN_DAYS
  SEVEN_TO_TEN_DAYS
  TEN_TO_FOURTEEN_DAYS
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum VendorRole {
  ADMIN
  SELLER
}
